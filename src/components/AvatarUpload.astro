---

---

<div>
  <label for="uploadavatar">Upload Avatar</label>
  <div class="dropbox-zone" id="dropbox-zone" tabindex="0">
    <input type="file" name="avatar" id="avatar" />
    <div class="avatar-placeholder">
      <img
        src="/assets/images/icon-upload.svg"
        class="avatar-placeholder__image"
        alt="Upload Icon"
      />
    </div>
    <p>Drag and drop or click to upload</p>
    <div class="configure-avatar">
      <button type="button" class="btn btn-secondary btn-secondary__remove"
        >Remove image</button
      >
      <button type="button" class="btn btn-secondary btn-secondary__change"
        >Change image</button
      >
    </div>
  </div>
  <small class="dropbox-hint">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="none"
      viewBox="0 0 16 16"
      ><path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M2 8a6 6 0 1 0 12 0A6 6 0 0 0 2 8Z"></path><path
        fill="currentColor"
        d="M8.004 10.462V7.596ZM8 5.57v-.042Z"></path><path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M8.004 10.462V7.596M8 5.569v-.042"></path></svg
    >
    Upload your photo (JPG or PNG, max size: 500KB).
  </small>
</div>

<script>
  import { throwErrorMessage } from "../utils/ThrowErrorMessage.ts";

  const $btnRemove = document.querySelector(
    ".btn-secondary__remove",
  ) as HTMLElement;
  const $btnChange = document.querySelector(
    ".btn-secondary__change",
  ) as HTMLElement;
  const $dropboxZone = document.querySelector(".dropbox-zone") as HTMLElement;
  const $configureAvatar = document.querySelector(
    ".configure-avatar",
  ) as HTMLElement;
  const $avatarImage = document.querySelector(
    ".avatar-placeholder__image",
  ) as HTMLImageElement;
  const $inputFile = document.getElementById("avatar");
  const ll = $configureAvatar.previousElementSibling as HTMLElement;

  $dropboxZone?.addEventListener("click", (e) => {
    e.stopPropagation();
    $inputFile?.click();
  });

  $inputFile?.addEventListener("change", (e) => {
    const target = e.target as HTMLInputElement;
    if (!target.files || target.files.length <= 0) {
      throwErrorMessage(
        "Por favor, selecciona una imagen para tu avatar.",
        "dropbox-zone",
      );
      return;
    }

    if (!isValidFormat(target.files[0])) {
      throwErrorMessage(
        `Solo se permiten imagen con formato PNG o JPG y tu imagen es: ${target.files[0].type}`,
        "dropbox-zone",
      );
      return;
    }

    if (!isValidSize(target.files[0])) {
      throwErrorMessage(
        `File too large. Please upload a photo under 500KB.`,
        "dropbox-zone",
      );
      return;
    }

    if (!$avatarImage.parentElement) {
      return;
    }

    $avatarImage.parentElement.style.padding = "0";
    $avatarImage.src = URL.createObjectURL(target.files[0]);
    ll.style.setProperty("display", "none");
    $configureAvatar.style.setProperty("display", "flex");
  });

  $btnRemove.addEventListener("click", (e) => {
    e.stopPropagation();
    removeAvatar();
  });
  $btnChange.addEventListener("click", (e) => {
    e.stopPropagation();
    removeAvatar();
  });

  const isValidFormat = (avatarImage: File): boolean => {
    return (
      avatarImage.type === "image/png" || avatarImage.type === "image/jpeg"
    );
  };

  const isValidSize = (avatarImage: File): boolean => {
    return Math.floor(avatarImage.size / 1024) <= 500;
  };

  const removeAvatar = () => {
    if ($avatarImage.parentElement) {
      $avatarImage.parentElement.style.padding = "0.5em";
    }
    $avatarImage.src = "/assets/images/icon-upload.svg";
    $configureAvatar.style.setProperty("display", "none");
    ll.style.setProperty("display", "block");
  };
</script>

<style>
  #avatar {
    display: none;
  }

  .configure-avatar {
    display: none;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;

    .btn-secondary:hover {
      background-color: var(--neutral-100);
      text-decoration: underline;
    }
  }

  div :global(.btn-secondary) {
    color: var(--neutral-300);
    padding: 2px 8px;
    border-radius: 4px;
    font-size: 12px;
    background-color: var(--neutral-100);
  }

  div :global(.success-message) {
    color: var(--neutral-300);
    padding-left: 0.5rem;
    font-size: 15px;
  }
  div :global(.avatar-placeholder) {
    display: inline-block;
    width: 50px;
    height: 50px;
    padding: 0.5em;
    border-radius: 12px;
    outline: 1px solid var(--neutral-500);
    background-color: hsla(0, 0%, 100%, 0.158);
    overflow: clip;
  }

  .dropbox-hint {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 0.75rem;
    color: var(--neutral-300);
    font-size: 12px;

    & > img {
      width: 20px;
    }
  }

  .dropbox-zone {
    backdrop-filter: blur(2px);
    min-height: 150px;
    max-height: 175px;
    display: flex;
    flex-flow: column nowrap;
    align-items: center;
    justify-content: center;
    gap: 12px;
    margin-top: 0.75rem;
    padding: 1.5em;
    background-color: var(--neutral-100);
    background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='18' ry='18' stroke='hsl(245, 15%, 58%)' stroke-width='3' stroke-dasharray='9' stroke-dashoffset='0' stroke-linecap='butt'/%3e%3c/svg%3e");
    border-radius: 18px;

    p {
      color: var(--neutral-300);
    }

    &:hover {
      cursor: pointer;
    }
  }

  .dropbox-zone__validated {
    background-image: url("data:image/svg+xml,%3csvg width='100%25' height='100%25' xmlns='http://www.w3.org/2000/svg'%3e%3crect width='100%25' height='100%25' fill='none' rx='18' ry='18' stroke='hsl(114, 45%, 49%)' stroke-width='3' stroke-dasharray='9' stroke-dashoffset='0' stroke-linecap='butt'/%3e%3c/svg%3e");
  }

  .dropbox-zone:hover {
    background-color: var(--neutral-150);
  }

  .dropbox-zone:focus-visible {
    outline: 2px solid var(--neutral-300);
    outline-offset: 2px;
  }
</style>
