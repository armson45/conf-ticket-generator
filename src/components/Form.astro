---
import AvatarUpload from "./AvatarUpload.astro";
---

<section class="form-wrapper">
    <form class="form">
        <AvatarUpload />
        <div class="input-wrapper">
            <label for="fullname">Full Name</label>
            <input type="text" id="fullname" name="fullname" />
        </div>
        <div class="input-wrapper">
            <label for="email">Email Adress</label>
            <input
                type="text"
                name="email"
                id="email"
                placeholder="example@email.com"
            />
        </div>
        <div class="input-wrapper">
            <label for="githubuser">Github Username</label>
            <input
                type="text"
                name="githubuser"
                id="githubuser"
                placeholder="@yourusername"
            />
        </div>

        <button type="submit" class="btn btn-primary">Generate My Ticket</button
        >
    </form>
</section>

<script>
    const form = document.querySelector("form");
    form?.addEventListener("submit", (e) => {
        e.preventDefault();
        const data = Object.fromEntries(new FormData(form));
        validateInputFields(data);
    });

    const regex =
        "^[a-z0-9]+(.[_a-z0-9]+)*@[a-z0-9-]+(.[a-z0-9-]+)*(.[a-z]{2,15})$";

    let validateInputFields = ({ fullname, email, githubuser }: any) => {
        const isValidEmail = new RegExp(regex).test(email);

        if (fullname == "") {
            throwErrorMessage("Please enter your name!", "fullname");
        }
        if (!isValidEmail) {
            throwErrorMessage("Please enter a valid email address", "email");
        }
        if (githubuser == "") {
            throwErrorMessage(
                "Please enter your GitHub username",
                "githubuser",
            );
        }
    };

    let throwErrorMessage = (exception: string, where: any) => {
        const errorMessageBox = document.createElement("div");
        const img = `<svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      fill="none"
      viewBox="0 0 16 16"
      ><path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M2 8a6 6 0 1 0 12 0A6 6 0 0 0 2 8Z"></path><path
        fill="currentColor"
        d="M8.004 10.462V7.596ZM8 5.57v-.042Z"></path><path
        stroke="currentColor"
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M8.004 10.462V7.596M8 5.569v-.042"></path></svg>`;

        errorMessageBox.classList.add("error");
        errorMessageBox.insertAdjacentHTML("afterbegin", img);
        errorMessageBox.insertAdjacentHTML("beforeend", `${exception}`);

        const inputField = document.querySelector(`input[name="${where}"]`) as HTMLInputElement;
        inputField.style.border = "1px solid var(--orange-500)";
        inputField?.insertAdjacentElement("afterend", errorMessageBox);
    };
</script>

<style>
    .form-wrapper {
        margin-top: 2rem;
        max-width: 530px;
        margin-inline: auto;
    }

    .form {
        padding-bottom: 5rem;
        display: flex;
        flex-flow: column nowrap;
        gap: 1.5rem;
        label {
            font-weight: 500;
        }
    }

    .input-wrapper {
        display: flex;
        flex-flow: column nowrap;
        gap: .75rem;

        input[type="text"] {
            outline: none;
            min-height: 55px;
            background-color: var(--neutral-100);
            border: 1px solid var(--neutral-500);
            padding: 1em;
            border-radius: .75rem;
            color: var(--neutral-300);
            backdrop-filter: blur(2px);
            font-size: 18px;
        }

        input::placeholder {
            color: var(--neutral-300);
        }
    }

    .input-wrapper.error input[type="text"] {
        border: 1px solid var(--orange-500);
    }

    .input-wrapper input[type="text"]:hover {
        background-color: var(--neutral-150);
        cursor: pointer;
    }

    .input-wrapper input[type="text"]:focus {
        outline: 2px solid var(--neutral-300);
        outline-offset: 2px;
    }

    @media (width >= 1024px) {
        .btn-primary {
            box-shadow: 0px 0px 0px var(--orange-500);
            transition: background 0.2s ease;
        }

        .btn-primary:hover {
            background-color: var(--orange-700);
            box-shadow: 0px 6px 0px var(--orange-500);
        }

        .form {
            padding: 0;
        }
    }
</style>
